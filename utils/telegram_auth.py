import hmac
import hashlib
import logging
from urllib.parse import parse_qsl
from config import BOT_TOKEN

logger = logging.getLogger(__name__)

def verify_telegram_init_data(init_data: str) -> dict:
    """‚úÖ Verify Telegram WebApp initData hash and return parsed data if valid."""
    # üîç –ü–∞—Ä—Å–∏–º initData –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
    parsed = dict(parse_qsl(init_data, keep_blank_values=True))
    hash_received = parsed.pop("hash", None)

    if not hash_received:
        raise ValueError("Missing hash in initData")

    # üîê –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed.items()))

    # üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
    secret_key = hashlib.sha256(BOT_TOKEN.encode()).digest()
    calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

    # ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
    if not hmac.compare_digest(calculated_hash, hash_received):
        raise ValueError("Invalid initData signature")

    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"‚úÖ Parsed initData: {parsed}")

    return parsed  # —Å–æ–¥–µ—Ä–∂–∏—Ç user id, username –∏ –ø—Ä.
