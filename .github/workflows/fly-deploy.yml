name: 🚀 Deploy to Fly.io

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual deployments

env:
  FLY_APP_NAME: whisperapi
  PYTHON_VERSION: "3.11"

jobs:
  # ==========================================
  # 🧪 Quality Assurance Pipeline
  # ==========================================
  test:
    name: 🧪 Run Tests & Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/testing.txt

      - name: 🔍 Lint code
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🛡️ Security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: 🧪 Run tests
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          ENV: test

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ==========================================
  # 🐳 Docker Build & Security Scan
  # ==========================================
  build:
    name: 🐳 Build & Scan Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: whisperapi:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'whisperapi:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================
  # 🚀 Production Deployment
  # ==========================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://whisperapi.fly.dev

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Set up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@v1.5
        with:
          version: latest

      - name: 🔍 Validate Fly.io configuration
        run: |
          flyctl config validate
          flyctl status || echo "App not yet deployed"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy to Fly.io
        id: deploy
        run: |
          echo "🚀 Starting deployment..."
          flyctl deploy --remote-only --wait-timeout 600
          echo "✅ Deployment completed"
          
          # Get app URL
          APP_URL=$(flyctl status --json | jq -r '.Hostname' | head -1)
          echo "app_url=https://$APP_URL" >> $GITHUB_OUTPUT
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🏥 Health check
        run: |
          sleep 30  # Wait for app to fully start
          curl -f "${{ steps.deploy.outputs.app_url }}" || exit 1
          echo "✅ Health check passed"

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # 🔔 Notification & Rollback
  # ==========================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: 📢 Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ needs.deploy.result }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email notification on failure
        if: needs.deploy.result == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 WhisperAPI Deployment Failed"
          body: |
            Deployment failed for commit ${{ github.sha }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}

  # ==========================================
  # 🔄 Auto-Rollback on Critical Failure
  # ==========================================
  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: 🔐 Set up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@v1.5

      - name: 🔄 Rollback to previous version
        run: |
          echo "🔄 Rolling back to previous version..."
          flyctl releases list --json | jq -r '.[1].Version' | xargs -I {} flyctl rollback {}
          echo "✅ Rollback completed"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}